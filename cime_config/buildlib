#!/usr/bin/env python3

"""
build ww3 library
"""
import sys, os

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.buildlib import parse_input
from CIME.build import get_standard_cmake_args
from CIME.case import Case
from CIME.utils import run_cmd, expect

logger = logging.getLogger(__name__)

###############################################################################
def buildlib(bldroot, libroot, case, compname=None):

    if case.get_value("DEBUG"):
        strdebug = "debug"
    else:
        strdebug = "nodebug"

    if case.get_value("BUILD_THREADED"):
        strthread = "threads"
    else:
        strthread = "nothreads"

    mpilib = case.get_value("MPILIB")

    exe_root = case.get_value("EXEROOT")

    logger.info("Running cmake for WW3")
    srcpath = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, "model", "src"))

    sharedpath = os.path.join(case.get_value("COMPILER"), mpilib, strdebug, strthread, "nuopc")
    cmake_flags = get_standard_cmake_args(case, os.path.join(sharedpath,"cdeps"), shared_lib=True)
    
    # base path of install to be completed by setting DESTDIR in make install
    cmake_flags += " -DCMAKE_INSTALL_PREFIX:PATH=/"
    cmake_flags += " -DLIBROOT={} ".format(libroot)
    cmake_flags += " -DMPILIB={} ".format(mpilib)
    cmake_flags += srcpath

    # Search SourceMods path
    srcmodsdir = os.path.join(case.get_value("CASEROOT"), "SourceMods")

    # all_files_in_srcmods = []
    # all_src_files = list(all_files_under(srcpath, ignoredirs=[".git","cmake","test",".github","cime_config"]))
    # basenames1 = [os.path.basename(f) for f in all_src_files]
    # basenames2 = [os.path.basename(f) for f in all_files_in_srcmods]
    # srcmods = list(set(basenames1).intersection(set(basenames2)))
    # if srcmods:
    #     logger.info("Found SourceMods {}".format(srcmods))
    #     for i, v in enumerate(all_src_files):
    #         for sfile in all_files_in_srcmods:
    #             if os.path.basename(sfile) == os.path.basename(v):
    #                 all_src_files[i] = v.replace(os.path.dirname(v), os.path.dirname(sfile))
    # logger.debug("all_src_files: {}".format(all_src_files))
    # latest_src_file = max(all_src_files, key=os.path.getmtime)

    # src_time = os.path.getmtime(latest_src_file)
    # if os.path.exists(os.path.join(bldroot,"CMakeFiles")):
    #     bld_time = os.path.getmtime(os.path.join(bldroot,"CMakeFiles"))
    # else:
    #     bld_time = src_time - 1

    # if any file in src is newer than CmakeFiles in the build directory, rerun cmake
    # if src_time > bld_time:
    #     logger.info("cmake_flags {}".format(cmake_flags))
    #     s,o,e = run_cmd("cmake {} ".format(cmake_flags), from_dir=bldroot, verbose=True)
    #     expect(not s,"ERROR from cmake output={}, error={}".format(o,e))
    # else:
    #     # The dwav_lib is the last file built in cdeps, wait for it to be built
    #     dwav_lib = os.path.join(bldroot,"dwav","libdwav.a")
    #     time_to_wait = 300
    #     time_counter = 0
    #     while not os.path.exists(dwav_lib):
    #         time.sleep(1)
    #         time_counter += 1
    #         if time_counter > time_to_wait:
    #             break
    #     expect(time_counter <= time_to_wait," Timeout waiting for {}".format(dwav_lib))

    logger.info("cmake_flags {}".format(cmake_flags))

    print (" wav srcpath is {}".format(srcpath))
    print (" wav bldroot is {}".format(bldroot))
    print (" wav libroot is {}".format(libroot))

    # run cmake
    s,o,e = run_cmd("cmake {} ".format(cmake_flags), from_dir=bldroot, verbose=True)
    expect(not s,"ERROR from cmake output={}, error={}".format(o,e))

    # run make
    # Note that cmake will add a lib/ director to the destdir so need to strip this out of libroot
    destdir = os.path.join(libroot, os.pardir)
    s,o,e = run_cmd("make install VERBOSE=1 DESTDIR={}".format(destdir), from_dir=bldroot, verbose=True)
    expect(not s,"ERROR from make output={}, error={}".format(o,e))

###############################################################################
def all_files_under(path, ignoredirs=[]):
    """Iterates through all files that are under the given path."""
    for cur_path, dirnames, filenames in os.walk(path, topdown=True):
        [dirnames.remove(d) for d in list(dirnames) if d in ignoredirs]
        for filename in filenames:
            yield os.path.join(cur_path, filename)

###############################################################################
def get_compiler_names(case):
    machine=case.get_value("MACH")
    machobj = Machines(machine=machine)
    compobj = Compilers(machobj)
    compiler = case.get_value("COMPILER")
    if case.get_value("MPILIB") == 'mpi-serial':
        ccomp = compobj.get_value("SCC",{"COMPILER":compiler,"MACH":machine}).strip()
        cxxcomp = compobj.get_value("SCXX",{"COMPILER":compiler}).strip()
        fcomp = compobj.get_value("SFC",{"COMPILER":compiler}).strip()
    else:
        ccomp = compobj.get_value("MPICC",{"COMPILER":compiler}).strip()
        cxxcomp = compobj.get_value("MPICXX",{"COMPILER":compiler}).strip()
        fcomp = compobj.get_value("MPIFC",{"COMPILER":compiler}).strip()

    return ccomp, cxxcomp, fcomp

###############################################################################
def _main_func(args):
    caseroot, libroot, bldroot = parse_input(args)
    print ("DEBUG: bldroot is {}".format(bldroot))
    with Case(caseroot) as case:
        buildlib(bldroot, libroot, case)

###############################################################################
if __name__ == "__main__":
    _main_func(sys.argv)
